function reverseArray(arr) {
    const mid = Math.floor(arr.length / 2);
    for (let i = 0; i < mid; i++) {
        const lastIndex = arr.length - i - 1;
        const temp = arr[i];
        arr[i] = arr[lastIndex];
        arr[lastIndex] = temp;
    }
    return arr;
}

function findMinMaxInArray(arr) {
    let index = 1;
    let min = arr[0];
    let max = arr[0];

    const l = arr.length;
    while (index < l) {
        if (min > arr[index]) {
            min = arr[index];
        }
        if (max < arr[index]) {
            max = arr[index];
        }
        index++;
    }
    console.log('min ', min);
    console.log('max ', max);

}

function moveAllNegtivesRight(arr) {
    const temp = [];
    let j = 0;
    for (let i = 0; i < arr.length; i++) {
        if (arr[i] > 0) {
            temp[j] = arr[i];
            j++;
        }
    }

    for (let i = 0; i < arr.length; i++) {
        if (arr[i] < 0) {
            temp[j] = arr[i];
            j++;
        }
    }

    for (let i = 0; i < arr.length; i++) {
        arr[i] = temp[i];
    }

    return arr;

}

function rotateByOne(arr) {
    for (let i = 1; i < arr.length; i++) {
        let temp = arr[i];
        arr[i] = arr[0];
        arr[0] = temp;
    }
    return arr;
}

function maxContigousSubarraySum(arr, N) {
    let maxSoFar = Number.MIN_SAFE_INTEGER;
    let currMaxHere = 0;
    for (let i = 0; i < N; i++) {
        currMaxHere = currMaxHere + arr[i];

        if (maxSoFar < currMaxHere) {
            maxSoFar = currMaxHere;
        }
        if (currMaxHere < 0) {
            currMaxHere = 0;
        }
    }

    return maxSoFar;
}

function getMinDiff(arr, K, N) {
    arr.sort((a, b) => a - b);
    let ans = arr[N - 1] - arr[0];
    let smallest = arr[0] + K;
    let largest = arr[N - 1] - K;

    for (let i = 0; i < N - 1; i++) {
        let min = Math.min(smallest, arr[i + 1] - K);
        let max = Math.max(largest, arr[i] + K);
        if (min < 0)
            continue;
        ans = Math.min(ans, max - min);
    }
    return ans;
}

function minJumps(arr, n) {
    if (n == 1) {
        return 0;
    }
    if (arr[0] === 0) {
        return -1;
    }
    let maxreach = arr[0];
    let jumps = 1;
    let steps = arr[0];

    for (let i = 1; i < n; i++) {
        if (i == n - 1) {
            return jumps;
        }

        maxreach = Math.max(maxreach, i + arr[i]);
        steps--;

        if (steps === 0) {
            jumps++;

            if (i >= maxreach) {
                return -1
            }

            steps = maxreach - i;

        }
    }
    return -1;
}

// using sliding window down and kadane's algo
function maxSubarraySumWithFixedWindow(arr, size) {

    if (size < 0 || size > arr.length)
        return null;
    let currentMaxSum = 0;
    let maxSeenSoFar = -Infinity;

    for (let i = 0; i < arr.length; i++) {
        currentMaxSum += arr[i];

        if (i >= size - 1) {
            maxSeenSoFar = Math.max(maxSeenSoFar, currentMaxSum);
            currentMaxSum -= arr[i - (size - 1)];
        }
    }

    return maxSeenSoFar;

}

function printMaxInSubArray(arr, size) {
    if (size < 0 || size > arr.length)
        return null;
    let currentMax = -Infinity;
    const slidingWindow = [];
    for (let i = 0; i < arr.length; i++) {
        currentMax = Math.max(currentMax, arr[i]);
        slidingWindow.push(arr[i]);
        if (i >= size - 1) {
            console.log(currentMax);
            slidingWindow.shift();
            if (!slidingWindow.includes(currentMax)) {
                currentMax = -Infinity;
                for (let j = 0; j < slidingWindow.length; j++) {
                    currentMax = Math.max(currentMax, arr[j]);
                }
            }

        }
    }
}

function merge(arr1, arr2) {
    //return arr1.concat(arr2).sort((a,b) => a-b);
    for (let i = 0; i < arr1.length; i++) {
        for (let j = 0; j < arr2.length; j++) {
            debugger;
            if (arr1[i] > arr2[j]) {
                const temp = arr1[i];
                arr1[i] = arr2[j];
                arr2[j] = temp;
                arr2.sort((a, b) => a - b);
                break;
            }
        }
        console.log(arr1[i]);
    }
    for (let j = 0; j < arr2.length; j++) {
        console.log(arr2[j])
    }
}

function mergeIntervals(intervals) {
    if (intervals.length === 1) {
        return intervals;
    }
    const ans = [];
    let i = 1;
    intervals.sort((a, b) => a[0] - b[0]);
    ans.push(intervals[0]);
    while (i < intervals.length) {
        const latestInterval = intervals[i];
        const l = ans.length;
        if (latestInterval[0] > ans[l - 1][1]) {
            ans.push(latestInterval);
        } else if (ans[l - 1][1] >= latestInterval[0] && latestInterval[1] >= ans[l - 1][1]) {
            ans[l - 1][1] = latestInterval[1];
        }
        i++;
    }
    return ans;
};

function buySellStockOnceMaxProfit(prices) {
    let minimum = prices[0];
    let maxProfit = 0;
    let index = 0;
    while (index < prices.length) {
        if (minimum > prices[index + 1]) {
            minimum = prices[index + 1];
        } else {
            const currProfit = prices[index + 1] - minimum;
            if (currProfit > maxProfit) {
                maxProfit = currProfit;
            }
        }
        index++;
    }
    return maxProfit;
}

function getPairsCount(arr, n, k) {
    let map = {};
    let count = 0;
    for (let i = 0; i < n; i++) {
        if (map[arr[i]]) {
            map[arr[i]]++;
        } else {
            map[arr[i]] = 1;
        }
    }
    for (let i = 0; i < n; i++) {
        const val = k - arr[i];
        if (map[val]) {
            count += map[val];
            if (val === arr[i]) { // remove the count for pair [arr[i],arr[i]]
                count--;
            }
        }

    }
    return count / 2;
}

function commonElements(A, B, C, n1, n2, n3) {
    let i = 0;
    let j = 0;
    let k = 0;
    let result = [];
    while (i < n1 && j < n2 && k < n3) {
        if (A[i] == B[j] && A[i] == C[k]) {
            if (!result.includes(A[i])) {
                result.push(A[i]);
            }
            i++;
            j++;
            k++;
        } else if (Math.min(A[i], Math.min(B[j], C[k])) == A[i])
            i++;
        else if (Math.min(A[i], Math.min(B[j], C[k])) == B[j])
            j++;
        else
            k++;
    }
    return result;
}

function subArrayExists(arr, n) {
    //using map to store the prefix sum which has appeared already.
    let sumMap = new Map();

    let sum = 0;
    //iterating over the array.
    for (let i = 0; i < n; i++) {
        //storing prefix sum.
        sum += arr[i];

        //if prefix sum is 0 or if it is already present in map then it is
        //repeated which means there is a subarray whose summation was 0,
        //so we return true.
        if (sum == 0 || sumMap.has(sum) == true)
            return true;

        //storing true in map for every prefix sum obtained.
        sumMap.set(sum, true);
    }
    //returning false if we don't get any subarray with 0 sum.
    return false;
}

function factorial(N) {
    let fact = 1;
    for (let i = 1; i <= N; i++) {
        fact *= i;
    }
    return fact;
}

function maxProduct(arr, n) {
    // Variables to store maximum and minimum
    // product till ith index.
    let minVal = arr[0];
    let maxVal = arr[0];

    let maxProduct = arr[0];

    for (let i = 1; i < n; i++) {

        // When multiplied by -ve number,
        // maxVal becomes minVal
        // and minVal becomes maxVal.
        if (arr[i] < 0) {
            let temp = maxVal;
            maxVal = minVal;
            minVal = temp;
        }

        // maxVal and minVal stores the
        // product of subarray ending at arr[i].
        maxVal = Math.max(arr[i], maxVal * arr[i]);
        minVal = Math.min(arr[i], minVal * arr[i]);

        // Max Product of array.
        maxProduct = Math.max(maxProduct, maxVal);
    }

    // Return maximum product found in array.
    return maxProduct;
}

function findLongestConseqSubseq(arr, N) {
    arr.sort((a, b) => a - b);
    let longest = 1;
    let currLongest = 1;
    for (let i = 0; i < N; i++) {
        if (arr[i] + 1 === arr[i + 1]) {
            currLongest++;
        } else if (arr[i] !== arr[i + 1]) {
            currLongest = 1;
        }
        if (currLongest > longest) {
            longest = currLongest;
        }
    }
    return longest;
}

function findLongestConseqSubseq2(arr, N) {
    //using a Set to store elements.
    let s1 = new Set();
    let ans = 0;

    //inserting all the array elements in Set.
    for (let i = 0; i < N; i++)
        s1.add(arr[i]);

    //checking each possible sequence from the start.
    for (let i = 0; i < N; i++) {
        //if current element is starting element of a sequence then only
        //we try to find out the length of sequence.
        if (s1.has(arr[i] - 1) == 0) {
            let j = arr[i];
            //then we keep checking whether the next consecutive elements
            //are present in Set and we keep incrementing the counter.
            while (s1.has(j))
                j++;

            //storing the maximum count.
            if (ans < j - arr[i])
                ans = j - arr[i];
        }
    }
    //returning the length of longest subsequence.
    return ans;
}

function findMaxProfitByBuyingNSellingShareAtmostTwice(price, n) {
    // Create profit array and
    // initialize it as 0
    let profit = new Array(n);
    for (let i = 0; i < n; i++)
        profit[i] = 0;

    /* Get the maximum profit with
    only one transaction
    allowed. After this loop,
    profit[i] contains maximum
    profit from price[i..n-1]
    using at most one trans. */
    let max_price = price[n - 1];
    for (let i = n - 2; i >= 0; i--) {

        // max_price has maximum
        // of price[i..n-1]
        if (price[i] > max_price)
            max_price = price[i];

        // We can get profit[i] by taking maximum of:
        // a) previous maximum, i.e., profit[i+1]
        // b) profit by buying at price[i] and selling at
        // max_price
        profit[i] = Math.max(profit[i + 1],
                max_price - price[i]);
    }

    // Get the maximum profit with
    // two transactions allowed
    // After this loop, profit[n-1]
    // contains the result
    let min_price = price[0];
    for (let i = 1; i < n; i++) {

        // min_price is minimum price
        // in price[0..i]
        if (price[i] < min_price)
            min_price = price[i];

        // Maximum profit is maximum of:
        // a) previous maximum, i.e., profit[i-1]
        // b) (Buy, Sell) at (min_price, price[i]) and add
        // profit of other trans. stored in profit[i]
        profit[i] = Math.max(profit[i - 1],
                profit[i] + (price[i] - min_price));
    }
    let result = profit[n - 1];

    return result;
}

function trappingWater(arr, n) {
    const left = new Array(n);
    const right = new Array(n);
    let ans = 0;
    left[0] = arr[0];
    for (let i = 1; i < n; i++) {
        left[i] = Math.max(left[i - 1], arr[i]);
    }
    right[n - 1] = arr[n - 1];
    for (let i = n - 2; i >= 0; i--) {
        right[i] = Math.max(right[i + 1], arr[i]);
    }

    for (let i = 0; i < n; i++) {
        ans = ans + Math.min(left[i], right[i]) - arr[i];
    }
    return ans;
}
// Chocolate distribution problem
function findMinDiff(arr, n, m) {
    arr.sort((a, b) => a - b);
    let res = arr[m - 1] - arr[0];
    for (let i = 1; i + m <= n; i++) {
        res = Math.min(res, arr[i + m - 1] - arr[i])
    }
    return res;
}

// two pointer approach on sorted array
function isPairSum(arr, N, X) {
    let i = 0;
    j = N - 1;
    while (i < j) {
        let sum = arr[i] + arr[j];
        if (sum > X) {
            j--
        } else if (sum < X) {
            i++
        } else if (sum === X) {
            return sum;
        }
    }

    // No pair found with given sum.
    return 0;
}

function minSwap(arr, n, k) {
    let good = 0;
    let bad = 0;
    for (let i = 0; i < n; i++) {
        if (arr[i] <= k) {
            good++;
        }
    }

    for (let i = 0; i < good; i++) {
        if (arr[i] > k) {
            bad++;
        }
    }
    let ans = bad;
    for (let i = 0, j = good; j < n; i++, j++) {
        if (arr[i] > k) {
            bad--;
        }
        if (arr[j] > k) {
            bad++;
        }
        ans = Math.min(ans, bad);
    }
    return ans;
}

console.log(minSwap([2, 1, 5, 6, 3], 5, 3));

//isPairSum([ 2, 3, 5, 8, 9, 10, 11 ], 7, 17);

//console.log(reverseArray(['t','a','r','u','n','g']));
//console.log(findMinMaxInArray([4,5,1,3, 0]));
//console.log(rotateByOne([4,5,1,3, 0]));

//getMinDiff([1,5,8,10], 2, 4);
//console.log(getMinDiff([1,5,8,10],2,4));
//console.log(getMinDiff([2, 6, 3, 4, 7, 2, 10, 3, 2, 1], 5, 10));
//console.log(getMinDiff([3, 9, 12, 16, 20],3,5));
//console.log(minJumps([1, 3, 5, 8, 9, 2, 6, 7, 6, 8, 9],11));
//console.log(printMaxInSubArray([1, 3, 5, 8, 9, 2, 6, 7, 6, 8, 1],3));
//console.log(printMaxInSubArray([7,2,4],2));

//console.log(mergeIntervals([[1,4],[0,3]]));

//console.log(buySellStockOnceMaxProfit([7,1,5,3,6,4]));
//console.log(getPairsCount([1, 5, 7, 1], 4, 6));
//console.log(console.log(subArrayExists([6, 4, 2, -3, 1], 5)));
//console.log(console.log(factorial(5)));
//console.log(maxProduct([6, -3, -10, 0, 2], 5));
//console.log(findLongestConseqSubseq2([6, 6, 2, 3, 1, 4, 1, 5, 6, 2, 8, 7, 4, 2, 1, 3, 4, 5, 9, 6], 20));

//console.log(findMaxProfitByBuyingNSellingShareAtmostTwice([2, 30, 15, 10, 8, 25, 80], 7));
//console.log(trappingWater([3,0,0,2,0,4], 6));
