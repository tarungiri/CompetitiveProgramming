// Binary Search Tree

class Node {
    constructor(value){
        this.value = value;
        this.left = null;
        this.right = null;
    }
}

class BinarySearchTree {
    constructor(value){
        this.root = null;
    }

    insert(value){
        const newNode = new Node(value);
        if(this.root === null){
            this.root = newNode;
        } else {
            let currentNode = this.root;
            while(true){
                if(currentNode.value > value){
                    if(!currentNode.left){
                        currentNode.left = newNode;
                        return this;
                    } else {
                        currentNode = currentNode.left;
                    }
                }
                if(currentNode.value < value){
                    if(!currentNode.right){
                        currentNode.right = newNode;
                        return this;
                    } else {
                        currentNode = currentNode.right;
                    }
                }
            }
        }
    }

    lookup(value){
        if(this.root === null) return null;
        let currentNode = this.root;
        while(currentNode){
            if(value < currentNode.value){
                currentNode = currentNode.left;
            }
            else if(value > currentNode.value){
                currentNode = currentNode.right;
            } else if(value == currentNode.value) {
                return currentNode;
            }
        }
        return null;
    }

    remove(root, key){
     if(root === null){
       return root;
     }
      if(key < root.value){
        root.left = this.remove(root.left, key);
      } else if(key > root.value){
        root.right = this.remove(root.right, key);
      } else {
        if(root.left === null){
          return root.right;
        } else if(root.right === null){
          return root.left;
        }
        root.value = this.minValue(root.right);
        root.right = this.remove(root.right, root.value);
      }
      return root;
    }

  minValue(node){
    let minv = node.value;
    while(node.left !== null){
      minv = node.left.value;
      node = node.left;
    }
    return minv;
  }

    breadthFirstSearch(){
      const result = [];
      const queue = [];
      let currentNode = this.root;
      queue.push(currentNode);
      while(queue.length > 0){
        currentNode = queue.shift();
        result.push(currentNode.value)
        if(currentNode.left){
          queue.push(currentNode.left);
        }
        if(currentNode.right){
          queue.push(currentNode.right);
        }
      }
      return result;
    }

     breadthFirstSearchR(){
      const list = [];
      const queue = [];
      let currentNode = this.root;
      queue.push(currentNode);
     return this.searchBFS(queue, list)
     
        
    }

    searchBFS(queue, list){
      if(queue.length === 0){
        return list;
      }
        let currentNode = queue.shift();
        list.push(currentNode.value)
        if(currentNode.left){
          queue.push(currentNode.left);
        }
        if(currentNode.right){
          queue.push(currentNode.right);
        }
        return this.searchBFS(queue, list);
    }
}

function traverse(node) {
  const tree = { value: node.value };
  tree.left = node.left === null ? null : traverse(node.left);
  tree.right = node.right === null ? null : traverse(node.right);
  return tree;
}

const tree = new BinarySearchTree();
tree.insert(9)
tree.insert(4)
tree.insert(6)
tree.insert(20)
tree.insert(170)
tree.insert(15)
tree.insert(1)
tree.insert(50)
tree.insert(180)
//tree.lookup(4)
console.log(tree.breadthFirstSearch());
//tree.remove(tree.root, 1)
//JSON.stringify(traverse(tree.root))