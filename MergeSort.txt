// Merge Sort

// Devide and Conqor

//Space complexity -> O(n)

//          Time Complexity ->    Best     |   Average  |   Worst
//                              O(n log n)   O(n log n)   O(n log n)

let numbers = [4,1,6,8,2,3,4,5,7];

function mergeSort(array){
    if(array.length === 1){
        return array;
    }
    const middle = Math.round(array.length / 2);
    const left = array.slice(0, middle);
    const right = array.slice(middle);
    
    return merge(mergeSort(left), mergeSort(right));
}

function merge(left, right) {
const result = [];
  let leftIndex = 0;
  let rightIndex = 0;
  while(leftIndex < left.length && 
        rightIndex < right.length){
     if(left[leftIndex] < right[rightIndex]){
       result.push(left[leftIndex]);
       leftIndex++;
     } else{
       result.push(right[rightIndex]);
       rightIndex++
    }
  }  
  // console.log(left, right)
  return result.concat(left.slice(leftIndex)).concat(right.slice(rightIndex));
}

console.log(mergeSort(numbers));

//console.log(numbers);