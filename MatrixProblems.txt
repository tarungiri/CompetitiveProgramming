function spiralTrversingMatrix(matrix, r, c){
    const arr = [];
    
  while (matrix.length) {
    arr.push(
      ...matrix.shift(),
      ...matrix.map(a => a.pop()),
      ...(matrix.pop() || []).reverse(),
      ...matrix.map(a => a.shift()).reverse()
    );
  }
  return arr;
}
 const spiralTrversingMatrix2 = (matrix, r, c) => {
    const result = [];
  let startColumn = 0;
  let endColumn = c-1;
  let startRow = 0;
  let endRow = r-1;
  while (startColumn <= endColumn && startRow <= endRow) {
    // Top row
    for (let i = startColumn; i <= endColumn; i++) {
      result.push(matrix[startRow][i]);
    }
    startRow++;
// Right column
    for (let i = startRow; i <= endRow; i++) {
      result.push(matrix[i][endColumn]);
    }
    endColumn--;
// Bottom row
    for (let i = endColumn; i >= startColumn; i--) {
      result.push(matrix[endRow][i]);
    }
    endRow--;
// start column
    for (let i = endRow; i >= startRow; i--) {
      result.push(matrix[i][startColumn]);
    }
    startColumn++;
  }
   if(r !== c) result.pop();
  return result;
 }

const searchMatrix = (matrix, target) => {
    let r = 0;
    let c = 0;
    let targetRow = [];
    if(matrix.length === 0) return false;
    
    while(r < matrix.length){
        let cols = matrix[r].length;
         if(matrix[r][cols - 1] >= target){
            return matrix[r].includes(target);
        } else {
            r++;
        }
    }
  return false;
};

function rowWithMax1s(arr, n, m){
        let i=0,j=m-1,max=-1;
     while(i<n &&j>=0)
     {
          if(arr[i][j]==1) 
          {
              j--;  max = i;
          }
          else  i++;
     }
     return max;
    }

searchMatrix([[1,3,5,7],[10,11,16,20],[23,30,34,60]], 3);


//console.table(spiralTrversingMatrix2([[1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16]],4,4));
